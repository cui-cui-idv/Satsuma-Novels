<%- include('partials/header') %>
<div class="auth-container">
    <div class="auth-form-wrapper">
        <h2>ログイン</h2>
        <form id="login-form">
            <div class="input-group">
                <input type="text" id="identifier" name="identifier" required placeholder="メールアドレスまたはユーザーID">
            </div>
            <div class="input-group">
                <input type="password" id="password" name="password" required placeholder="パスワード">
            </div>
            <button type="submit" class="btn btn-primary">ログイン</button>
        </form>
        <p id="error-message" style="color: #ff4d4d; text-align: center; margin-top: 1rem;"></p>
        <div style="text-align: center; margin-top: 1.5rem;">
            <a href="/forgot-password">パスワードをお忘れですか？</a>
        </div>
        <p style="text-align: center; margin-top: 1rem; color: var(--font-secondary);">
            アカウントをお持ちでないですか？ <a href="/register" style="color: var(--accent-primary);">新規登録</a>
        </p>
    </div>
</div>

<script>
    const loginForm = document.getElementById('login-form');
    const errorMessage = document.getElementById('error-message');

    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const identifier = document.getElementById('identifier').value;
        const password = document.getElementById('password').value;
        
        errorMessage.textContent = 'ログイン中...';
        errorMessage.style.color = 'var(--font-secondary)';

        try {
            // ステップ1: サーバーに問い合わせて、正しいメールアドレスを取得
            const emailResponse = await fetch('/api/get-email-from-identifier', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ identifier: identifier })
            });

            // サーバーからのレスポンスがNGなら、ここで処理を中断
            if (!emailResponse.ok) {
                // サーバー側で「ユーザーが見つからない」などのエラーが起きている
                throw new Error('ログイン情報が正しくありません。');
            }

            const { email } = await emailResponse.json();

            // ステップ2: 取得したメールアドレスとパスワードでFirebaseにログイン
            const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
            const idToken = await userCredential.user.getIdToken();
            
            // ステップ3: reCAPTCHAトークンを取得して、最終的なログイン処理
            grecaptcha.ready(function() {
                grecaptcha.execute('<%= firebaseConfig.recaptchaSiteKey %>', {action: 'login'}).then(async function(token) {
                    const sessionResponse = await fetch('/login', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            idToken: idToken,
                            recaptchaToken: token
                        }),
                    });

                    if (sessionResponse.ok) {
                        window.location.href = '/';
                    } else {
                        throw new Error('サーバーセッションの作成に失敗しました。');
                    }
                });
            });

        } catch (error) {
            console.error('ログイン処理全体のエラー:', error);
            errorMessage.style.color = '#ff4d4d';
            // ▼▼▼ どんなエラーでも、ユーザーには同じメッセージを表示する ▼▼▼
            errorMessage.textContent = 'ハンドル名（またはメールアドレス）かパスワードが正しくありません。';
        }
    });
</script>

<%- include('partials/footer') %>