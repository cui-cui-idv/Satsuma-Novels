<%- include('partials/header') %>
<div class="auth-container">
    <div class="auth-form-wrapper" id="register-wrapper">
        <h2>新規登録</h2>
        <form id="register-form">
            <div class="input-group">
                <input type="text" id="username" name="username" required placeholder="ユーザー名（表示名）">
            </div>
            <div class="input-group">
                <input type="text" id="handle" name="handle" required pattern="^[a-zA-Z0-9_]{3,15}$" placeholder="ユーザーID (3〜15文字の半角英数字と_)">
                <small style="color: var(--font-secondary); font-size: 0.8rem;">これはプロフィールURLに使われ、後から変更できません。</small>
            </div>
            <div class="input-group">
                <input type="email" id="email" name="email" required placeholder="メールアドレス">
            </div>
            <div class="input-group">
                <input type="password" id="password" name="password" minlength="6" required placeholder="パスワード">
            </div>
            <button type="submit" class="btn btn-primary">登録して確認メールを送信</button>
        </form>
        <p id="message" style="text-align: center; margin-top: 1.5rem;"></p>
        <p style="text-align: center; margin-top: 1rem; color: var(--font-secondary);">
            すでにアカウントをお持ちですか？ <a href="/login" style="color: var(--accent-primary);">ログイン</a>
        </p>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const registerForm = document.getElementById('register-form');
    const messageEl = document.getElementById('message');
    const wrapperEl = document.getElementById('register-wrapper');

    registerForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        messageEl.textContent = '処理中です...';
        messageEl.style.color = 'var(--font-secondary)';

        const username = document.getElementById('username').value;
        const handle = document.getElementById('handle').value;
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;

        try {
            const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            await user.updateProfile({ displayName: username });
            await user.sendEmailVerification();

            const response = await fetch('/register-firestore', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ uid: user.uid, email: user.email, username: username, handle: handle })
            });

            if (!response.ok) {
                const errorData = await response.json();
                // サーバー側でエラーが起きた場合、Authに作成したユーザーを削除するクリーンアップ処理
                await user.delete();
                throw new Error(errorData.message || 'データベースへの登録に失敗しました。');
            }

            wrapperEl.innerHTML = `
                <div style="text-align: center;">
                    <h2>登録ありがとうございます</h2>
                    <p style="color: var(--font-secondary);">アカウントを有効にするため、<strong>${email}</strong> に送信された確認メール内のリンクをクリックしてください。</p>
                    <a href="/login" class="btn btn-primary" style="margin-top: 2rem;">ログインページへ</a>
                </div>
            `;
        } catch (error) {
            console.error('登録エラー:', error);
            messageEl.style.color = '#ff4d4d';
            if (error.code === 'auth/email-already-in-use') {
                messageEl.textContent = 'このメールアドレスは既に使用されています。';
            } else {
                messageEl.textContent = 'エラー: ' + error.message;
            }
        }
    });
});
</script>

<%- include('partials/footer') %>