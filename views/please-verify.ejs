<%- include('partials/header') %>

<main class="container">
    <div class="card" style="text-align: center;">
        <h2>メールアドレスの確認が必要です</h2>
        <p style="color: var(--font-secondary); margin-top: 1.5rem;">
            ご登録ありがとうございます。<br>
            アカウントを有効にするため、<strong><%= user.email %></strong> 宛に送信された確認メール内のリンクをクリックしてください。
        </p>
        <p style="color: var(--font-secondary); font-size: 0.9rem;">
            （メールが届かない場合は、迷惑メールフォルダもご確認ください）
        </p>

        <div style="margin-top: 2rem;">
            <button id="resend-email-button" class="btn btn-primary">確認メールを再送信</button>
        </div>
        <p id="message" style="margin-top: 1rem;"></p>
    </div>
</main>

<%- include('partials/footer') %>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const resendButton = document.getElementById('resend-email-button');
    const messageEl = document.getElementById('message');

    // ログイン状態を確実に取得するためのPromiseを返す関数
    function getCurrentUser() {
        return new Promise((resolve, reject) => {
            const unsubscribe = firebase.auth().onAuthStateChanged(user => {
                unsubscribe(); // 最初の結果を受け取ったら監視を解除
                resolve(user);
            }, reject);
        });
    }

    let cooldown = false;
    resendButton.addEventListener('click', async () => {
        if (cooldown) {
            messageEl.textContent = '少し時間をおいてから再試行してください。';
            return;
        }

        messageEl.textContent = '送信中です...';
        messageEl.style.color = 'var(--font-secondary)';

        try {
            // ▼▼▼ ボタンがクリックされた時に、認証状態が確定するまで待つ ▼▼▼
            const user = await getCurrentUser();

            if (!user) {
                throw new Error('ログイン状態を確認できませんでした。ページをリロードしてください。');
            }

            const actionCodeSettings = {
                url: `${window.location.origin}/actions`,
                handleCodeInApp: true
            };

            await user.sendEmailVerification(actionCodeSettings);
            
            messageEl.style.color = 'var(--accent-primary)';
            messageEl.textContent = '確認メールを再送信しました。';
            
            // クールダウン処理
            cooldown = true;
            resendButton.disabled = true;
            let seconds = 60;
            resendButton.textContent = `再送信 (${seconds})`;
            const interval = setInterval(() => {
                seconds--;
                resendButton.textContent = `再送信 (${seconds})`;
                if (seconds <= 0) {
                    clearInterval(interval);
                    resendButton.textContent = '確認メールを再送信';
                    resendButton.disabled = false;
                    cooldown = false;
                }
            }, 1000);

        } catch (error) {
            console.error('メール再送信エラー:', error);
            messageEl.style.color = '#ff4d4d';
            messageEl.textContent = error.message;
        }
    });
});
</script>